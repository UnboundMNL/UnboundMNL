<form action="/uploadUsers" method="post" enctype="multipart/form-data" class="register-container w-full">
	<h4>Account Registration</h4><hr>
	<div class="edit-container flex flex-column" style="gap: 1em">
		<h4>Upload Excel File</h4>
		<label for="fileUpload" style="gap: 0.25em;" class="upload-container flex flex-column">
			<input type="file" name="file" id="fileUpload" class="hidden-file-input">
			<img src="/img/upload.svg" />
			Drag & drop a file to upload
			<div id="fileName"></div>
			<label for="fileUpload" class="btn btn-upload-files" style="width: fit-content" type="button">Upload Files</label>
		</label>

        
		<input type="number" name="year" id="year" placeholder="Input year (e.g., 2025)" required>

		<% if (authority != 'SEDO' && authority != 'Treasurer') { %>
			<select id="cluster" name="cluster"></select>
		<% } %>
		<% if (authority != 'Treasurer') { %>
			<select id="subproject" name="subproject"></select>
			<select id="shg" name="shg"></select>
		<% } %>

		<button id="registerButton" class="btn btn-primary" style="width: fit-content; align-self: center" disabled>Register Accounts</button>
	</div>
</form>

<script>
    const fileInput = document.querySelector('#fileUpload');
    const fileNameDisplay = document.querySelector('#fileName');
    const registerBtn = document.querySelector('#registerButton');

    const yearField = document.querySelector("#year")
    const clusterSelect = document.querySelector(`#cluster`)
    const subprojectSelect = document.querySelector(`#subproject`)
    const shgSelect = document.querySelector(`#shg`)

    const clusters = JSON.parse(`<%- typeof clusters !== 'undefined' ? JSON.stringify(clusters) : '[]' %>`)
    const subprojects = JSON.parse(`<%- subprojects %>`)
    const shgs = JSON.parse(`<%- shgs %>`)

    console.log({clusters, subprojects, shgs})

    const updateRegisterButtonState = () => {
        let canSubmit = true;
        
        if (!fileInput.files || fileInput.files.length === 0) {
            canSubmit = false;
        }
        
        if (!yearField.value || yearField.value.trim() === '') {
            canSubmit = false;
        }
        
        <% if (authority == 'Admin') { %>
            if (!clusterSelect?.value || !subprojectSelect?.value || !shgSelect?.value) {
                canSubmit = false;
            }
        <% } else if (authority == 'SEDO') { %>
            if (!subprojectSelect?.value || !shgSelect?.value) {
                canSubmit = false;
            }
        <% } else if (authority == 'Treasurer') { %>
        <% } %>
        
        registerBtn.disabled = !canSubmit;
        console.log('Register button state:', canSubmit ? 'enabled' : 'disabled');
    };

    fileInput.onchange = function () {
        if (this.files.length > 0) {
            fileNameDisplay.innerText = this.files[0].name;
            updateRegisterButtonState();
        } else {
            fileNameDisplay.innerText = '';
            updateRegisterButtonState();
        }
    };

    const createOption = (id, displayValue) => {
        const elm = document.createElement('option')
        elm.innerText = displayValue
        elm.value = id
        return elm
    }

    const updateOptions = (options, elm) => {
        if (!elm) return;
        
        elm.innerHTML = ""; 

        if (options.length === 0) {
            elm.appendChild(createOption('', 'No options available'));
            return;
        }
        
        elm.appendChild(createOption('', `Select ${elm.id}`));
        
        console.log(`Updating ${elm.id} with options:`, options);
        options.forEach(o => {
            elm.appendChild(createOption(o.id, o.value))
        });
        
        elm.value = '';
    }

    const updateShgs = (e) => {
        const selectedProjectId = e.target.value;
        
        if (!selectedProjectId) {
            updateOptions([], shgSelect);
            updateRegisterButtonState();
            return;
        }
        
        const sp = subprojects.find(p => p._id == selectedProjectId);
        
        if (!sp || !sp.groups) {
            updateOptions([], shgSelect);
            updateRegisterButtonState();
            return;
        }
        
        const validShgs = shgs.filter(s => sp.groups.includes(s._id));
        updateOptions(validShgs.map(g => ({id: g._id, value: g.name})), shgSelect);
        updateRegisterButtonState();
    }

    // Initialize dropdowns based on authority
    <% if (authority == 'Admin') { %>
        if (clusterSelect && clusters.length > 0) {
            updateOptions(clusters.map(c => ({id: c._id, value: c.name})), clusterSelect);

            const updateSubprojects = (e) => {
                const clusterId = e.target.value;
                
                if (!clusterId) {
                    updateOptions([], subprojectSelect);
                    updateOptions([], shgSelect);
                    updateRegisterButtonState();
                    return;
                }
                
                const clusterProjects = subprojects.filter(p => p.cluster == clusterId);
                updateOptions(clusterProjects.map(p => ({id: p._id, value: p.name})), subprojectSelect);
                updateOptions([], shgSelect); // Clear groups when cluster changes
                updateRegisterButtonState();
            }
            
            clusterSelect.onchange = updateSubprojects;
        }
    <% } else if (authority == 'SEDO') { %>
        if (subprojectSelect && subprojects.length > 0) {
            updateOptions(subprojects.map(p => ({id: p._id, value: p.name})), subprojectSelect);
        }
    <% } else if (authority == 'Treasurer') { %>
        console.log('Treasurer mode - no dropdowns needed');
    <% } %>

    // Set up event listeners for non-Treasurer users
    <% if (authority != 'Treasurer') { %>
        if (subprojectSelect) {
            subprojectSelect.onchange = updateShgs;
        }
        if (shgSelect) {
            shgSelect.addEventListener('change', updateRegisterButtonState);
        }
    <% } %>

    // Add event listeners for year field
    if (yearField) {
        yearField.addEventListener('input', updateRegisterButtonState);
        yearField.addEventListener('change', updateRegisterButtonState);
    }

    // Initial validation
    updateRegisterButtonState();

    // Form submit validation
    const form = document.querySelector('form');
    form.addEventListener('submit', function(e) {
        const year = yearField.value.trim();
        // Check if year is a valid 4-digit number
        if (!/^\d{4}$/.test(year)) {
            e.preventDefault();
            alert('Year must be exactly 4 digits (e.g., 2024)');
            return false;
        }
        
        // Check if year is in valid range
        const yearNum = parseInt(year);
        if (yearNum < 1900 || yearNum > 2200) {
            e.preventDefault();
            alert('Year must be between 1900 and 2200');
            return false;
        }
        
        <% if (authority == 'Admin') { %>
            if (!clusterSelect.value || !subprojectSelect.value || !shgSelect.value) {
                e.preventDefault();
                alert('Please select cluster, project, and group before uploading');
                return false;
            }
        <% } else if (authority == 'SEDO') { %>
            if (!subprojectSelect.value || !shgSelect.value) {
                e.preventDefault();
                alert('Please select project and group before uploading');
                return false;
            }
        <% } %>
    });
</script>